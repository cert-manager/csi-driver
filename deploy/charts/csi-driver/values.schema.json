{
  "$defs": {
    "helm-values": {
      "additionalProperties": false,
      "properties": {
        "affinity": {
          "$ref": "#/$defs/helm-values.affinity"
        },
        "app": {
          "$ref": "#/$defs/helm-values.app"
        },
        "commonLabels": {
          "$ref": "#/$defs/helm-values.commonLabels"
        },
        "daemonSetAnnotations": {
          "$ref": "#/$defs/helm-values.daemonSetAnnotations"
        },
        "global": {
          "$ref": "#/$defs/helm-values.global"
        },
        "image": {
          "$ref": "#/$defs/helm-values.image"
        },
        "imagePullSecrets": {
          "$ref": "#/$defs/helm-values.imagePullSecrets"
        },
        "livenessProbeImage": {
          "$ref": "#/$defs/helm-values.livenessProbeImage"
        },
        "metrics": {
          "$ref": "#/$defs/helm-values.metrics"
        },
        "nodeDriverRegistrarImage": {
          "$ref": "#/$defs/helm-values.nodeDriverRegistrarImage"
        },
        "nodeSelector": {
          "$ref": "#/$defs/helm-values.nodeSelector"
        },
        "openshift": {
          "$ref": "#/$defs/helm-values.openshift"
        },
        "podAnnotations": {
          "$ref": "#/$defs/helm-values.podAnnotations"
        },
        "podLabels": {
          "$ref": "#/$defs/helm-values.podLabels"
        },
        "priorityClassName": {
          "$ref": "#/$defs/helm-values.priorityClassName"
        },
        "resources": {
          "$ref": "#/$defs/helm-values.resources"
        },
        "tolerations": {
          "$ref": "#/$defs/helm-values.tolerations"
        }
      },
      "type": "object"
    },
    "helm-values.affinity": {
      "default": {},
      "description": "Kubernetes affinity: constraints for pod assignment.\n\nFor example:\naffinity:\n  nodeAffinity:\n   requiredDuringSchedulingIgnoredDuringExecution:\n     nodeSelectorTerms:\n     - matchExpressions:\n       - key: foo.bar.com/role\n         operator: In\n         values:\n         - master",
      "type": "object"
    },
    "helm-values.app": {
      "additionalProperties": false,
      "properties": {
        "driver": {
          "$ref": "#/$defs/helm-values.app.driver"
        },
        "kubeletRootDir": {
          "$ref": "#/$defs/helm-values.app.kubeletRootDir"
        },
        "livenessProbe": {
          "$ref": "#/$defs/helm-values.app.livenessProbe"
        },
        "logLevel": {
          "$ref": "#/$defs/helm-values.app.logLevel"
        }
      },
      "type": "object"
    },
    "helm-values.app.driver": {
      "additionalProperties": false,
      "properties": {
        "csiDataDir": {
          "$ref": "#/$defs/helm-values.app.driver.csiDataDir"
        },
        "name": {
          "$ref": "#/$defs/helm-values.app.driver.name"
        },
        "useTokenRequest": {
          "$ref": "#/$defs/helm-values.app.driver.useTokenRequest"
        }
      },
      "type": "object"
    },
    "helm-values.app.driver.csiDataDir": {
      "default": "/tmp/cert-manager-csi-driver",
      "description": "Configures the hostPath directory that the driver writes and mounts volumes from.",
      "type": "string"
    },
    "helm-values.app.driver.name": {
      "default": "csi.cert-manager.io",
      "description": "Name of the driver to be registered with Kubernetes.",
      "type": "string"
    },
    "helm-values.app.driver.useTokenRequest": {
      "default": false,
      "description": "If enabled, this uses a CSI token request for creating. CertificateRequests. CertificateRequests are created by mounting the pod's service accounts.",
      "type": "boolean"
    },
    "helm-values.app.kubeletRootDir": {
      "default": "/var/lib/kubelet",
      "description": "Overrides the path to root kubelet directory in case of a non-standard Kubernetes install.",
      "type": "string"
    },
    "helm-values.app.livenessProbe": {
      "additionalProperties": false,
      "properties": {
        "port": {
          "$ref": "#/$defs/helm-values.app.livenessProbe.port"
        }
      },
      "type": "object"
    },
    "helm-values.app.livenessProbe.port": {
      "default": 9809,
      "description": "The port that will expose the liveness of the csi-driver.",
      "type": "number"
    },
    "helm-values.app.logLevel": {
      "default": 1,
      "description": "Verbosity of cert-manager-csi-driver logging.",
      "type": "number"
    },
    "helm-values.commonLabels": {
      "default": {},
      "description": "Labels to apply to all resources.",
      "type": "object"
    },
    "helm-values.daemonSetAnnotations": {
      "default": {},
      "description": "Optional additional annotations to add to the csi-driver DaemonSet.",
      "type": "object"
    },
    "helm-values.global": {
      "description": "Global values shared across all (sub)charts"
    },
    "helm-values.image": {
      "additionalProperties": false,
      "properties": {
        "digest": {
          "$ref": "#/$defs/helm-values.image.digest"
        },
        "pullPolicy": {
          "$ref": "#/$defs/helm-values.image.pullPolicy"
        },
        "registry": {
          "$ref": "#/$defs/helm-values.image.registry"
        },
        "repository": {
          "$ref": "#/$defs/helm-values.image.repository"
        },
        "tag": {
          "$ref": "#/$defs/helm-values.image.tag"
        }
      },
      "type": "object"
    },
    "helm-values.image.digest": {
      "description": "Target image digest. Override any tag, if set.\nFor example:\ndigest: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20",
      "type": "string"
    },
    "helm-values.image.pullPolicy": {
      "default": "IfNotPresent",
      "description": "Kubernetes imagePullPolicy on Deployment.",
      "type": "string"
    },
    "helm-values.image.registry": {
      "description": "Target image registry. This value is prepended to the target image repository, if set.\nFor example:\nregistry: quay.io\nrepository: jetstack/cert-manager-csi-driver",
      "type": "string"
    },
    "helm-values.image.repository": {
      "default": "quay.io/jetstack/cert-manager-csi-driver",
      "description": "Target image repository.",
      "type": "string"
    },
    "helm-values.image.tag": {
      "description": "Override the image tag to deploy by setting this variable. If no value is set, the chart's appVersion is used.",
      "type": "string"
    },
    "helm-values.imagePullSecrets": {
      "default": [],
      "description": "Optional secrets used for pulling the csi-driver container image.\n\nFor example:\nimagePullSecrets:\n- name: secret-name",
      "items": {},
      "type": "array"
    },
    "helm-values.livenessProbeImage": {
      "additionalProperties": false,
      "properties": {
        "digest": {
          "$ref": "#/$defs/helm-values.livenessProbeImage.digest"
        },
        "pullPolicy": {
          "$ref": "#/$defs/helm-values.livenessProbeImage.pullPolicy"
        },
        "registry": {
          "$ref": "#/$defs/helm-values.livenessProbeImage.registry"
        },
        "repository": {
          "$ref": "#/$defs/helm-values.livenessProbeImage.repository"
        },
        "tag": {
          "$ref": "#/$defs/helm-values.livenessProbeImage.tag"
        }
      },
      "type": "object"
    },
    "helm-values.livenessProbeImage.digest": {
      "description": "Target image digest. Override any tag, if set.\nFor example:\ndigest: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20",
      "type": "string"
    },
    "helm-values.livenessProbeImage.pullPolicy": {
      "default": "IfNotPresent",
      "description": "Kubernetes imagePullPolicy on Deployment.",
      "type": "string"
    },
    "helm-values.livenessProbeImage.registry": {
      "description": "Target image registry. This value is prepended to the target image repository, if set.\nFor example:\nregistry: registry.k8s.io\nrepository: sig-storage/livenessprobe",
      "type": "string"
    },
    "helm-values.livenessProbeImage.repository": {
      "default": "registry.k8s.io/sig-storage/livenessprobe",
      "description": "Target image repository.",
      "type": "string"
    },
    "helm-values.livenessProbeImage.tag": {
      "default": "v2.16.0@sha256:88092d100909918ae0a768956cf78c88bc59cd7232720f7cdbdfb5d2e235001e",
      "description": "Override the image tag to deploy by setting this variable. If no value is set, the chart's appVersion is used.",
      "type": "string"
    },
    "helm-values.metrics": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "$ref": "#/$defs/helm-values.metrics.enabled"
        },
        "podmonitor": {
          "$ref": "#/$defs/helm-values.metrics.podmonitor"
        },
        "port": {
          "$ref": "#/$defs/helm-values.metrics.port"
        }
      },
      "type": "object"
    },
    "helm-values.metrics.enabled": {
      "default": true,
      "description": "Enable the metrics server on csi-driver pods.\nIf false, the metrics server will be disabled and the other metrics fields below will be ignored.",
      "type": "boolean"
    },
    "helm-values.metrics.podmonitor": {
      "additionalProperties": false,
      "properties": {
        "annotations": {
          "$ref": "#/$defs/helm-values.metrics.podmonitor.annotations"
        },
        "enabled": {
          "$ref": "#/$defs/helm-values.metrics.podmonitor.enabled"
        },
        "endpointAdditionalProperties": {
          "$ref": "#/$defs/helm-values.metrics.podmonitor.endpointAdditionalProperties"
        },
        "honorLabels": {
          "$ref": "#/$defs/helm-values.metrics.podmonitor.honorLabels"
        },
        "interval": {
          "$ref": "#/$defs/helm-values.metrics.podmonitor.interval"
        },
        "labels": {
          "$ref": "#/$defs/helm-values.metrics.podmonitor.labels"
        },
        "namespace": {
          "$ref": "#/$defs/helm-values.metrics.podmonitor.namespace"
        },
        "prometheusInstance": {
          "$ref": "#/$defs/helm-values.metrics.podmonitor.prometheusInstance"
        },
        "scrapeTimeout": {
          "$ref": "#/$defs/helm-values.metrics.podmonitor.scrapeTimeout"
        }
      },
      "type": "object"
    },
    "helm-values.metrics.podmonitor.annotations": {
      "default": {},
      "description": "Additional annotations to add to the PodMonitor.",
      "type": "object"
    },
    "helm-values.metrics.podmonitor.enabled": {
      "default": false,
      "description": "Create a PodMonitor to add csi-driver to Prometheus if you are using Prometheus Operator. See https://prometheus-operator.dev/docs/operator/api/#monitoring.coreos.com/v1.PodMonitor",
      "type": "boolean"
    },
    "helm-values.metrics.podmonitor.endpointAdditionalProperties": {
      "default": {},
      "description": "EndpointAdditionalProperties allows setting additional properties on the endpoint such as relabelings, metricRelabelings etc.\n\nFor example:\nendpointAdditionalProperties:\n relabelings:\n - action: replace\n   sourceLabels:\n   - __meta_kubernetes_pod_node_name\n   targetLabel: instance",
      "type": "object"
    },
    "helm-values.metrics.podmonitor.honorLabels": {
      "default": false,
      "description": "Keep labels from scraped data, overriding server-side labels.",
      "type": "boolean"
    },
    "helm-values.metrics.podmonitor.interval": {
      "default": "60s",
      "description": "The interval to scrape metrics.",
      "type": "string"
    },
    "helm-values.metrics.podmonitor.labels": {
      "default": {},
      "description": "Additional labels to add to the PodMonitor.",
      "type": "object"
    },
    "helm-values.metrics.podmonitor.namespace": {
      "description": "The namespace that the pod monitor should live in, defaults to the cert-manager-csi-driver namespace.",
      "type": "string"
    },
    "helm-values.metrics.podmonitor.prometheusInstance": {
      "default": "default",
      "description": "Specifies the `prometheus` label on the created PodMonitor. This is used when different Prometheus instances have label selectors matching different PodMonitors.",
      "type": "string"
    },
    "helm-values.metrics.podmonitor.scrapeTimeout": {
      "default": "30s",
      "description": "The timeout before a metrics scrape fails.",
      "type": "string"
    },
    "helm-values.metrics.port": {
      "default": 9402,
      "description": "The TCP port on which the metrics server will listen.",
      "type": "number"
    },
    "helm-values.nodeDriverRegistrarImage": {
      "additionalProperties": false,
      "properties": {
        "digest": {
          "$ref": "#/$defs/helm-values.nodeDriverRegistrarImage.digest"
        },
        "pullPolicy": {
          "$ref": "#/$defs/helm-values.nodeDriverRegistrarImage.pullPolicy"
        },
        "registry": {
          "$ref": "#/$defs/helm-values.nodeDriverRegistrarImage.registry"
        },
        "repository": {
          "$ref": "#/$defs/helm-values.nodeDriverRegistrarImage.repository"
        },
        "tag": {
          "$ref": "#/$defs/helm-values.nodeDriverRegistrarImage.tag"
        }
      },
      "type": "object"
    },
    "helm-values.nodeDriverRegistrarImage.digest": {
      "description": "Target image digest. Override any tag, if set.\nFor example:\ndigest: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20",
      "type": "string"
    },
    "helm-values.nodeDriverRegistrarImage.pullPolicy": {
      "default": "IfNotPresent",
      "description": "Kubernetes imagePullPolicy on Deployment.",
      "type": "string"
    },
    "helm-values.nodeDriverRegistrarImage.registry": {
      "description": "Target image registry. This value is prepended to the target image repository, if set.\nFor example:\nregistry: registry.k8s.io\nrepository: sig-storage/csi-node-driver-registrar",
      "type": "string"
    },
    "helm-values.nodeDriverRegistrarImage.repository": {
      "default": "registry.k8s.io/sig-storage/csi-node-driver-registrar",
      "description": "Target image repository.",
      "type": "string"
    },
    "helm-values.nodeDriverRegistrarImage.tag": {
      "default": "v2.15.0@sha256:11f199f6bec47403b03cb49c79a41f445884b213b382582a60710b8c6fdc316a",
      "description": "Override the image tag to deploy by setting this variable. If no value is set, the chart's appVersion is used.",
      "type": "string"
    },
    "helm-values.nodeSelector": {
      "default": {
        "kubernetes.io/os": "linux"
      },
      "description": "Kubernetes node selector: node labels for pod assignment.",
      "type": "object"
    },
    "helm-values.openshift": {
      "additionalProperties": false,
      "properties": {
        "securityContextConstraint": {
          "$ref": "#/$defs/helm-values.openshift.securityContextConstraint"
        }
      },
      "type": "object"
    },
    "helm-values.openshift.securityContextConstraint": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "$ref": "#/$defs/helm-values.openshift.securityContextConstraint.enabled"
        },
        "name": {
          "$ref": "#/$defs/helm-values.openshift.securityContextConstraint.name"
        }
      },
      "type": "object"
    },
    "helm-values.openshift.securityContextConstraint.enabled": {
      "default": "detect",
      "description": "Include RBAC to allow the DaemonSet to \"use\" the specified\nSecurityContextConstraints.\n\nThis value can either be a boolean true or false, or the string \"detect\". If set to \"detect\" then the securityContextConstraint is automatically enabled for openshift installs."
    },
    "helm-values.openshift.securityContextConstraint.name": {
      "default": "privileged",
      "description": "Name of the SecurityContextConstraints to create RBAC for.",
      "type": "string"
    },
    "helm-values.podAnnotations": {
      "default": {},
      "description": "Optional additional annotations to add to the csi-driver pods.",
      "type": "object"
    },
    "helm-values.podLabels": {
      "default": {},
      "description": "Optional additional labels to add to the csi-driver pods.",
      "type": "object"
    },
    "helm-values.priorityClassName": {
      "default": "",
      "description": "Optional priority class to be used for the csi-driver pods.",
      "type": "string"
    },
    "helm-values.resources": {
      "default": {},
      "description": "Kubernetes pod resources requests/limits for cert-manager-csi-driver.\n\nFor example:\nresources:\n  limits:\n    cpu: 100m\n    memory: 128Mi\n  requests:\n    cpu: 100m\n    memory: 128Mi",
      "type": "object"
    },
    "helm-values.tolerations": {
      "default": [],
      "description": "Kubernetes pod tolerations for cert-manager-csi-driver.\n\nFor example:\ntolerations:\n- operator: \"Exists\"",
      "items": {},
      "type": "array"
    }
  },
  "$ref": "#/$defs/helm-values",
  "$schema": "http://json-schema.org/draft-07/schema#"
}
